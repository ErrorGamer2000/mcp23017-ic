type binary = 0 | 1;
export function clone<T>(obj: T): T;
export function range(start: number, length: number, step: number): number[];
export function isOne(value: any, set: any[]): boolean;
export function invariant(condition: boolean, error: Error): void;
export const REGISTERS: {
  IODIRA: 0x00;
  IODIRB: 0x01;
  IPOLA: 0x02;
  IPOLB: 0x03;
  GPINTENA: 0x04;
  GPINTENB: 0x05;
  DEFVALA: 0x06;
  DEFVALB: 0x07;
  INTCONA: 0x08;
  INTCONB: 0x09;
  IOCON: 0x0a;
  IOCON: 0x0b;
  GPPUA: 0x0c;
  GPPUB: 0x0d;
  INTFA: 0x0e;
  INTFB: 0x0f;
  INTCAPA: 0x10;
  INTCAPB: 0x11;
  GPIOA: 0x12;
  GPIOB: 0x13;
  OLATA: 0x14;
  OLATB: 0x15;
};
export function setProp<T>(thisArg: any, name: string, value: T): T;
export function getProp(thisArg: any, name: string): any | undefined;
export function toBinaryArray(byte: number): binary[];
